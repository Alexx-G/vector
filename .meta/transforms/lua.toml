[transforms.lua]
title = "Lua"
allow_you_to_description = "transform events with a full embedded [Lua][urls.lua] engine"
beta = true
common = true
function_category = "program"
input_types = ["log", "metric"]
output_types = ["log", "metric"]
requirements = {}

<%= render(
  "_partials/fields/_component_options.toml",
  groups: ["v1", "v2"],
  name: "lua",
  type: "transform"
) %>

[transforms.lua.options.version]
type = "string"
common = true
required = true
groups = ["v2"]
description = "Transform API version"
enum = { 2 = "Lua transform API version 2" }

[transforms.lua.options.source]
type = "string"
common = true
groups = ["v1"]
examples = [
"""\
require("script") # a `script.lua` file must be in your `search_dirs`

if event["host"] == nil then
  local f = io.popen ("/bin/hostname")
  local hostname = f:read("*a") or ""
  f:close()
  hostname = string.gsub(hostname, "\\n$", "")
  event["host"] = hostname
end\
"""
]
required = true
description = "The inline Lua source to evaluate."

[transforms.lua.options.search_dirs]
type = "[string]"
groups = ["v1", "v2"]
examples = [["/etc/vector/lua"]]
common = true
description = """\
A list of directories search when loading a Lua file via the `require` \
function.\
"""

[transforms.lua.options.hooks]
type = "table"
category = "Hooks"
common = true
required = true
groups = ["v2"]
description = "Configures hooks handlers."

[transforms.lua.options.hooks.children.init]
type = "string"
groups = ["v2"]
common = true
required = false
description = """\
A function which is called when the trasnform is initialized.\
"""
examples = [
"""\
function ()
  local f = io.popen ("/bin/hostname") -- run "hostname" command to determine the hostname
  hostname = f:read("*a") or "" -- set a global variable which can be used in other hooks
  f:close() -- close the pipe
end\
"""
]

[transforms.lua.options.hooks.children.process]
type = "string"
groups = ["v2"]
common = true
required = true
description = """\
A function which is called for each incoming event. It can produce new events using `emit` function.\
"""
examples = [
"""\
function (event, emit)
  event.log.field = "value" -- set value of a field
  event.log.another_field = nil -- remove field
  event.log.first, event.log.second = nil, event.log.first -- rename field
  emit(event) -- emit the processed event
end\
"""
]
